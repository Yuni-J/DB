DAY03

--test2 테이블에서 확인
1. score 칼럼 추가 기본값을 0으로 설정
2. 학과가 국문 학생들을 출력
3. 학과가 정보인 튜플을 컴퓨터로 변경
4. score의 값을 update
5. score가 80이상인 학생들만 출력
6. 학과별 인원수 출력 (학과별로 오름차순)
7. 학과별 성적평균 (소수점 2자리 반올림) 칼럼명 평균
8. 주소별 인원수 출력 (주소별로 오름차순)
9. 정보 학과만 성적 합계 출력
10. 성적이 70점이상인 학생들의 num, name, dep, score만 출력


1. score 칼럼 추가 기본값을 0으로 설정
alter table test2 add score int default 0;

2. 학과가 국문 학생들을 출력
select * from test2
where dep = '국문';

3. 학과가 정보인 튜플을 컴퓨터로 변경
update test2 set dep = '컴퓨터'
where  dep = '정보';

4. score의 값을 update
update test2 set score = 
case
when num=111 then 65
when num=222 then 87
when num=333 then 96
when num=444 then 74
when num=555 then 81
end;

5. score가 80이상인 학생들만 출력
select * from test2 where score >=80;

6. 학과별 인원수 출력 (학과별로 오름차순)
select dep, count(dep) from test2
group by dep
order by dep;

7. 학과별 성적평균 (소수점 2자리 반올림) 칼럼명 평균
select dep, round(avg(score),2) as '학과평균' from test2
group by dep;

8. 주소별 인원수 출력 (주소별로 오름차순)
select addr, count(addr) from test2
group by addr
order by addr;

9. 국문 학과만 성적 합계 출력
select dep, sum(score) from test2
group by dep
having dep = '국문';

10. 성적이 70점이상인 학생들의 num, name, dep, score만 출력
select num, name, dep, score from test2
where score >= 70;

--------------------------------------------------------
product 속성의 구성
--제품 테이블(product)

create table product(
num int auto_increment,              //자동으로 넘버링
type_a varchar(50) not null,
type_b varchar(50) not null,
name varchar(100) not null,
price int default 0,
amount int default 100,              //재고량
sale_amount int default 0,           //판매량
register_date datetime,
primary key (num));

insert into product(type_a, type_b, name, price, amount, sale_amount, register_date) values
('티셔츠','긴소매','폴라 티셔츠',15000,34,100,'2023-10-15'),
('티셔츠','긴소매','크롭 티셔츠',10000,50,100,'2023-10-15'),
('티셔츠','반소매','순면라운드 반팔티',15900,10,153,'2023-09-15'),
('티셔츠','민소매','에이 나시',9000,33,33,'2023-09-10'),
('패션운동복','트레이닝상의','피트니스상의',30000,34,55,'2023-12-05'),
('패션운동복','트레이닝하의','피트니스하의',50000,55,34,'2023-12-06'),
('패션운동복','트레이닝세트','피트니스상하의',90000,70,34,'2023-12-07'),
('아우터','재킷','양면 롱 후리스 자켓',23300,100,42,'2023-11-05'),
('아우터','코트','양털 겨울 코트',50000,50,30,'2023-10-31'),
('아우터','코트','트렌치 코트',40000,50,30,'2023-10-31'),
('아우터','패딩','롱 패팅 점퍼',47400,10,45,'2023-11-01');

--판매 테이블(buy)

create table buy(
num int auto_increment,
customer varchar(20),
product_name varchar(100),
price int default 0,
amount int default 0,
buy_date datetime default now(),
primary key(num));

--------------------------------------------------------
날짜도 텍스트로 입력해야함

--홍길동이 폴라 티셔츠 5개를 구매
insert into buy(customer, product_name, price, amount)
values
('홍길동','폴라 티셔츠',15000,5);

--product 테이블에서 제품내용을 조회하여 추가
홍길순 크롭 티셔츠를 3장 구매(num = 2)
insert into buy(customer, product_name, price, amount)
select '홍길순', name, price, 3 from product
where num = 2;

--5명이 여러가지 상품으로 구매
insert into buy(customer, product_name, price, amount)
select '김순이', name, price, 2 from product
where num = 7;

insert into buy(customer, product_name, price, amount)
select '강감찬', name, price, 5 from product
where num = 10;

insert into buy(customer, product_name, price, amount)
select '김철수', name, price, 1 from product
where num = 7;

insert into buy(customer, product_name, price, amount)
select '김영이', name, price, 7 from product
where num = 3;

insert into buy(customer, product_name, price, amount)
select '박진주', name, price, 4 from product
where num = 5;

--제품별 판매 수량 조회
select product_name, sum(amount) from buy
group by product_name;

--제품별 판매 금액 조회
select product_name, sum(price) from buy
group by product_name;

--total 필드를 추가 int
alter table buy add total int after amount;

--price * amount 곱한 값으로 나타내기
update buy
set total = price * amount;


--칼럼을 생성시 계산된 값을 자동계산하여 생성(generated columns)
--stored : 값이 저장되는 방식
=> 데이터가 입력되거나 수정될 때 해당 칼럼도 같이 갱신
--virtual : 데이터를 저장하지 않고 정의만
=> 해당 칼럼을 읽으려소 시도할 때 계산을 통해 보여주는것만 


--방금전 생성한 total 필드를 삭제하고, 다시 generated columns으로
alter table buy drop total;
alter table buy add total int generated always as 
(price * amount) stored after amount;

--전체 총 판매수량과 총 매출액 출력
select sum(amount) as '총 판매수량',sum(total) as '총 매출액' from buy
group by amount and total;

--------------------------------------------------------
--product 테이블에서 
1. 최신 상품순으로 정렬
select * from product
order by register_date desc;    
//order by 열_이름 (오름차순)
//order by 열_이름 desc (내림차순)

2. type_a 별로 상품의 개수와 price 합계
select distinct type_a, count(type_a), sum(price) from product
group by type_a;

3. price 20000이상인 제품은 할인상품에 해당
   할인상품을 출력
select * from product
where price >= 20000;

4. 할인상품의 이름과 가격을 출력
-할인가격 (2만원 이상인 제품만 대상으로 10% 할인된 가격)
-할인상품명, 정상가, 할인가
select name, price as '정상가', round((price*0.9),0) as '할인가' 
from product
where price >= 50000;
-모든 데이터의 이름, 정상가, 할인가 출력
select name, price as '정상가', 
(case when price>=50000 then round((price*0.9),0) else price end) as '할인가'
from product;

=> 가능 if(price>=50000, round((price*0.9),0), price) as '할인가'

5. 11월에 입력된 상품만 출력
select * from product
where month(register_date) = 11;

5-1. 날짜표시를 년도와 달만
select date_format(register_date, '%Y-%m') as mon from product;
//date_format : %y(년도 2자리), %Y(년도 4자리)

5-2. 월별 판매수량(sale_amount) 합계 월별로 오름차순 정렬
select distinct date_format(register_date, '%Y-%m') as mon, 
sum(sale_amount) as sum from product
group by mon 
order by mon;

6. type_a 별로 판매량(sale_amount) 합계가 가장 큰 값을 출력
select distinct type_a, sum(sale_amount) sa from product
group by type_a
order by sa desc limit 0,1;

6-1. 서브쿼리 사용 (서브쿼리의 값을 이용할 경우 별칭(alias)은 필수)
select max(sa) from  
(select sum(sale_amount) sa from product
group by type_a) as p;

select avg(sa) from  
(select sum(sale_amount) sa from product
group by type_a) as p;

--------------------------------------------------------
트랜잭션(transaction)
-하나의 작업을 하기 위한 명령어 묶음 단위
-하나의 트랜잭션에서 실행하는 모든 명령어가 완료되어야 
전체가 완료되는 형태의 작업에서 사용
1. 2. 3. 모두 완료되어야 함
-만약 하나라도 작업이 취소되면 모두 취소
-완료와 취소를 나중에 결정하는 개념
-임시 실행 개념
-데이터의 안정성을 확보하기 위한 방법

start transaction;
명령어1;
명령어2;
...
commit; => 완료
rollback; => 취소

DDL (create, drop, alter, rename) => rollback 대상이 아님

-mysql에서는 auto commit이 기본적으로 on 상태

트랜젝션을 이용해서
start transaction;
1. 폴라 티셔츠 가격을 15000 => 17000 변경
update buy set price = 17000
where num = 1;

2. 변경된 값 확인
select * from buy;
rollback;

--------------------------------------------------------
1. buy 테이블에서 customer의 이름을 홍O동 변경하여 출력 (select)
2. product 테이블에서 price가 40000이상인 데이터만
   상품명(할인상품) 표시하여 출력 (전체데이터 표시)
3. product 테이블에서 월별 매출(price*sale_amount) 합계 출력
4. product 테이블에서 price가 가장 큰(가장 비싼) 제품명, price(출력)
5. buy 테이블의 구매 내역을 3개 추가
   =>(product 테이블 조회하여 추가)
6. product_non 테이블을 product 테이블과 같은 형식으로 추가하여
   register_date의 9월 데이터를 이동
     => 기존 product 테이블에서 제거
     => transaction을 이용하여 첫 과정부터 완료되었음을 commit하기
7. buy 테이블에서 가장 많이 판매한 제품의 이름 출력


1. buy 테이블에서 customer의 이름을 홍O동 변경하여 출력 (select)
select insert
2. product 테이블에서 price가 40000이상인 데이터만
   상품명(할인상품) 표시하여 출력 (전체데이터 표시)

3. product 테이블에서 월별 매출(price*sale_amount) 합계 출력

4. product 테이블에서 price가 가장 큰(가장 비싼) 제품명, price(출력)

5. buy 테이블의 구매 내역을 3개 추가
   =>(product 테이블 조회하여 추가)

6. product_non 테이블을 product 테이블과 같은 형식으로 추가하여
   register_date의 9월 데이터를 이동
     => 기존 product 테이블에서 제거
     => transaction을 이용하여 첫 과정부터 완료되었음을 commit하기

7. buy 테이블에서 가장 많이 판매한 제품의 이름 출력











































